# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class SyncTools < Formula
  desc "Go CLI wrapper around rsync with advanced filtering and SyncFile post-sync actions"
  homepage "https://github.com/DamianReeves/sync-tools"
  version "0.4.1-test2"
  license "Apache-2.0"

  depends_on "rsync" => :runtime

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test2/sync-tools_0.4.1-test2_darwin_amd64.tar.gz"
      sha256 "2c19c7f426f93c4c8c96b6d662959f6ee4f4d0c218d6785a5263499ad3eab2b1"

      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test2/sync-tools_0.4.1-test2_darwin_arm64.tar.gz"
      sha256 "efa2e72195516f413b4e67d3a84264a69134edd82a158346ca30b2acdaf34fcd"

      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel? and Hardware::CPU.is_64_bit?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test2/sync-tools_0.4.1-test2_linux_amd64.tar.gz"
      sha256 "856af39e65f37ab7e1033483580e619422d405f27ceeca797fbdf0475495477c"
      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
    if Hardware::CPU.arm? and Hardware::CPU.is_64_bit?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test2/sync-tools_0.4.1-test2_linux_arm64.tar.gz"
      sha256 "a51a4f35dc08a93ca98a84ea74076f726ac109fcf218ef8b60ff573c9bdae1c0"
      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
  end

  test do
    assert_match version.to_s, shell_output("#{bin}/sync-tools --version 2>&1")

    # Test basic help functionality
    assert_match "Advanced directory synchronization", shell_output("#{bin}/sync-tools --help")

    # Test subcommands exist
    assert_match "sync", shell_output("#{bin}/sync-tools --help")
    assert_match "syncfile", shell_output("#{bin}/sync-tools --help")
  end
end
