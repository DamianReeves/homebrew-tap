# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class SyncTools < Formula
  desc "Go CLI wrapper around rsync with advanced filtering and SyncFile post-sync actions"
  homepage "https://github.com/DamianReeves/sync-tools"
  version "0.4.1-test2"
  license "Apache-2.0"

  depends_on "rsync" => :runtime

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test2/sync-tools_0.4.1-test2_darwin_amd64.tar.gz"
      sha256 "d3b74a1e241c763dee1aa7f620850304a20c8bd03a6c836c3b5d746bbdd5419a"

      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test2/sync-tools_0.4.1-test2_darwin_arm64.tar.gz"
      sha256 "904c722e2a28767473d2d36884ea00d77d80049c30d6f6c8de99ef7fed4c7f84"

      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel? and Hardware::CPU.is_64_bit?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test2/sync-tools_0.4.1-test2_linux_amd64.tar.gz"
      sha256 "9b2c91396c0ad606732c9e123fa1fe792d60a00452af3d6563edadbc6fa63a11"
      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
    if Hardware::CPU.arm? and Hardware::CPU.is_64_bit?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test2/sync-tools_0.4.1-test2_linux_arm64.tar.gz"
      sha256 "84c9695ec59d484de6ab020053f9fe5ed7d5fc3f572d87ddac1961644d8517e3"
      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
  end

  test do
    assert_match version.to_s, shell_output("#{bin}/sync-tools --version 2>&1")

    # Test basic help functionality
    assert_match "Advanced directory synchronization", shell_output("#{bin}/sync-tools --help")

    # Test subcommands exist
    assert_match "sync", shell_output("#{bin}/sync-tools --help")
    assert_match "syncfile", shell_output("#{bin}/sync-tools --help")
  end
end
