# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class SyncTools < Formula
  desc "Go CLI wrapper around rsync with advanced filtering and SyncFile post-sync actions"
  homepage "https://github.com/DamianReeves/sync-tools"
  version "0.4.1-test3"
  license "Apache-2.0"

  depends_on "rsync" => :runtime

  on_macos do
    if Hardware::CPU.intel?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test3/sync-tools_0.4.1-test3_darwin_amd64.tar.gz"
      sha256 "b94593c66ea1676227b4d8e78dbefaf33917d956fed4ddd43e9d4b7311b38d65"

      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
    if Hardware::CPU.arm?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test3/sync-tools_0.4.1-test3_darwin_arm64.tar.gz"
      sha256 "009cc0cfdb6a9e5c5ea76b5f58ed109b0edced7bc484c6ad253156472f905c5a"

      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel? and Hardware::CPU.is_64_bit?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test3/sync-tools_0.4.1-test3_linux_amd64.tar.gz"
      sha256 "460c0c98993f392432523687795b7d2a5fe82ee7779be1798f0a34cee3ed6643"
      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
    if Hardware::CPU.arm? and Hardware::CPU.is_64_bit?
      url "https://github.com/DamianReeves/sync-tools/releases/download/v0.4.1-test3/sync-tools_0.4.1-test3_linux_arm64.tar.gz"
      sha256 "19a190300c760dbe273fa1ffaeeb830ca43827bab564623de3f48a84710b7398"
      def install
        bin.install "sync-tools"

        # Generate and install shell completions if available
        if File.exist?(buildpath/"completions")
          bash_completion.install "completions/sync-tools.bash" => "sync-tools"
          zsh_completion.install "completions/_sync-tools"
          fish_completion.install "completions/sync-tools.fish"
        end
      end
    end
  end

  test do
    assert_match version.to_s, shell_output("#{bin}/sync-tools --version 2>&1")

    # Test basic help functionality
    assert_match "Advanced directory synchronization", shell_output("#{bin}/sync-tools --help")

    # Test subcommands exist
    assert_match "sync", shell_output("#{bin}/sync-tools --help")
    assert_match "syncfile", shell_output("#{bin}/sync-tools --help")
  end
end
